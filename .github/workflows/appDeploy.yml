name: FastAPI MLOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - 'k8-manifests/app/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'k8-manifests/app/**'

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_NAME: fastapi-image-classifier

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-scan:
    name: Build, Scan & Push Image
    runs-on: ubuntu-latest
    needs: security-scan
    outputs:
      image-digest: ${{ steps.image.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=main-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        id: image
        with:
          context: ./app
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: Load image for scanning
        run: docker load --input /tmp/image.tar

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy SARIF report
        uses: aquasecurity/trivy-action@master
        if: always()
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

      - name: Push Docker image to ACR
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: ./app
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-manifests:
    name: Update K8s Manifests
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Update image tag in manifest
        run: |
          NEW_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}"
          sed -i "s|image: .*|image: ${NEW_IMAGE}|g" k8-manifests/app/app.yml
          
      - name: Commit and push changes
        run: |
          git add k8-manifests/app/app.yml
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ðŸš€ Update image to main-${{ github.sha }}"
            git push
          fi

  deploy-notification:
    name: ArgoCD Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-and-scan, update-manifests]
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deployment Summary
        run: |
          echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Image Built** | âœ… ${{ needs.build-and-scan.outputs.image-tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Security Scan** | âœ… Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| **ACR Push** | âœ… Completed |" >> $GITHUB_STEP_SUMMARY
          echo "| **Manifest Updated** | âœ… Updated |" >> $GITHUB_STEP_SUMMARY
          echo "| **ArgoCD Sync** | ðŸ”„ Pending (check ArgoCD UI) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“‹ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. ArgoCD will automatically detect the manifest changes" >> $GITHUB_STEP_SUMMARY
          echo "2. Check ArgoCD UI at: https://argocd.isaiahmichael.com" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor deployment status in ArgoCD" >> $GITHUB_STEP_SUMMARY
          echo "4. Access the app at: https://aks.isaiahmichael.com" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ”— Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.IMAGE_NAME }}:main-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: linux/amd64" >> $GITHUB_STEP_SUMMARY