# External DNS for Automatic DNS Management with Cloudflare
# This configuration ensures A records point to the LoadBalancer IP (74.177.117.202)

apiVersion: v1
kind: Namespace
metadata:
  name: external-dns
  labels:
    name: external-dns
---
# Service Account for External DNS
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns
  namespace: external-dns
  labels:
    app: external-dns
---
# Cluster Role - Permissions for External DNS
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-dns
  labels:
    app: external-dns
rules:
  - apiGroups: [""]
    resources:
      - services
      - endpoints
      - pods
      - nodes
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - networking.k8s.io
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - watch
      - list
  - apiGroups: [""]
    resources:
      - events
    verbs:
      - create
---
# Cluster Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-dns
  labels:
    app: external-dns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns
subjects:
  - kind: ServiceAccount
    name: external-dns
    namespace: external-dns
---
# Cloudflare API Token Secret (structure only - replace with actual token)
apiVersion: v1
kind: Secret
metadata:
  name: cloudflare-api-token-secret
  namespace: external-dns
  labels:
    app: external-dns
  annotations:
    kubernetes.io/description: "Cloudflare API Token for DNS management"
type: Opaque
data:
  # Base64 encoded Cloudflare API token
  # Replace this with your actual token: echo -n "your_token_here" | base64
  api-token: "REPLACE_WITH_BASE64_ENCODED_TOKEN"
---
# Copy of secret for cert-manager namespace (for SSL certificates)
apiVersion: v1
kind: Secret
metadata:
  name: cloudflare-api-token-secret
  namespace: cert-manager
  labels:
    app: external-dns
  annotations:
    kubernetes.io/description: "Cloudflare API Token for SSL certificate DNS validation"
type: Opaque
data:
  # Base64 encoded Cloudflare API token (same as above)
  api-token: "REPLACE_WITH_BASE64_ENCODED_TOKEN"
---
# External DNS Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns
  namespace: external-dns
  labels:
    app: external-dns
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: external-dns
  template:
    metadata:
      labels:
        app: external-dns
    spec:
      serviceAccountName: external-dns
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: external-dns
        image: registry.k8s.io/external-dns/external-dns:v0.14.0
        imagePullPolicy: IfNotPresent
        env:
          - name: CF_API_TOKEN
            valueFrom:
              secretKeyRef:
                name: cloudflare-api-token-secret
                key: api-token
        args:
          # Source configuration - only ingress
          - --source=ingress
          
          # Provider configuration
          - --provider=cloudflare
          
          # Domain filtering
          - --domain-filter=isaiahmichael.com
          
          # Registry configuration for managing DNS records
          - --registry=txt
          - --txt-owner-id=external-dns-aks
          - --txt-prefix=external-dns-
          
          # Annotation filters to respect target IP override
          - --annotation-filter=external-dns.alpha.kubernetes.io/hostname
          
          # Logging and monitoring
          - --log-level=info
          - --log-format=text
          - --events
          
          # Sync interval
          - --interval=60s
          
          # Policy for managing records
          - --policy=sync
          
          # Cloudflare specific settings
          - --cloudflare-proxied=false
          
          # Metrics
          - --metrics-address=0.0.0.0:7979
        ports:
        - containerPort: 7979
          name: http-metrics
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: http-metrics
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /healthz
            port: http-metrics
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
---
# Service for External DNS metrics (optional)
apiVersion: v1
kind: Service
metadata:
  name: external-dns
  namespace: external-dns
  labels:
    app: external-dns
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "7979"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: external-dns
  ports:
  - port: 7979
    targetPort: http-metrics
    protocol: TCP
    name: http-metrics
  type: ClusterIP
