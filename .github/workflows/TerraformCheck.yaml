name: Terraform Deploy and Security Scan

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - '.github/workflows/TerraformCheck.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'

env:
  TF_VERSION: '1.5.0'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  terraform-security-scan:
    name: 'Terraform Security Scan'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -out=tfplan
      continue-on-error: true

    - name: Setup Python for Checkov
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Checkov
      run: |
        python -m pip install --upgrade pip
        pip install checkov

    - name: Run Checkov Scan on Terraform Files
      run: |
        checkov -d . \
          --framework terraform \
          --output cli \
          --output json \
          --output sarif \
          --output-file-path console,checkov-report.json,checkov-report.sarif \
          --soft-fail || echo "Checkov scan completed with issues - continuing anyway"
      continue-on-error: true

    - name: Run Checkov Scan on Terraform Plan
      run: |
        checkov -f tfplan \
          --framework terraform_plan \
          --output cli \
          --output json \
          --output-file-path console,checkov-plan-report.json \
          --soft-fail || echo "Checkov plan scan completed with issues - continuing anyway"
      continue-on-error: true

    - name: Upload Checkov Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: checkov-reports
        path: |
          terraform/checkov-report.json
          terraform/checkov-report.sarif
          terraform/checkov-plan-report.json

    - name: Upload SARIF file to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: terraform/checkov-report.sarif

    - name: Generate Security Report Summary
      run: |
        echo "## 🔒 Terraform Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "checkov-report.json" ]; then
          PASSED=$(jq '.summary.passed' checkov-report.json)
          FAILED=$(jq '.summary.failed' checkov-report.json)
          SKIPPED=$(jq '.summary.skipped' checkov-report.json)
          
          echo "### 📊 Static Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Passed: $PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Failed: $FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- ⏭️ Skipped: $SKIPPED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "checkov-plan-report.json" ]; then
          PLAN_PASSED=$(jq '.summary.passed' checkov-plan-report.json)
          PLAN_FAILED=$(jq '.summary.failed' checkov-plan-report.json)
          
          echo "### 📋 Terraform Plan Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Passed: $PLAN_PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Failed: $PLAN_FAILED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### 📁 Available Reports" >> $GITHUB_STEP_SUMMARY
        echo "- [Checkov JSON Report](checkov-report.json)" >> $GITHUB_STEP_SUMMARY
        echo "- [Checkov SARIF Report](checkov-report.sarif)" >> $GITHUB_STEP_SUMMARY
        echo "- [Terraform Plan Report](checkov-plan-report.json)" >> $GITHUB_STEP_SUMMARY

  terraform-deploy:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest
    needs: terraform-security-scan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && always()
    defaults:
      run:
        working-directory: terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

    - name: Get AKS Credentials
      run: |
        az aks get-credentials \
          --resource-group $(terraform output -raw resource_group_name) \
          --name $(terraform output -raw aks_cluster_name) \
          --overwrite-existing
      env:
        AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    - name: Verify AKS Cluster
      run: |
        kubectl get nodes
        kubectl get pods --all-namespaces

    - name: Generate Deployment Summary
      run: |
        echo "## 🚀 Terraform Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Infrastructure Outputs" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        terraform output >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ☸️ AKS Cluster Status" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        kubectl get nodes >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  notify-completion:
    name: 'Notification'
    runs-on: ubuntu-latest
    needs: [terraform-security-scan, terraform-deploy]
    if: always()
    
    steps:
    - name: Send Success Notification
      if: needs.terraform-deploy.result == 'success'
      run: |
        echo "✅ Terraform deployment completed successfully!"
        echo "🔒 Security scan results available (check artifacts)"
        echo "☸️ AKS cluster is ready"

    - name: Send Deployment Notification
      if: needs.terraform-deploy.result != 'success' && needs.terraform-deploy.result != 'skipped'
      run: |
        echo "⚠️ Deployment had issues but completed!"
        echo "📋 Check the logs for details"
        echo "🔒 Security scan results available (check artifacts)"

    - name: Send Skip Notification
      if: needs.terraform-deploy.result == 'skipped'
      run: |
        echo "⏭️ Deployment skipped (not main branch or not push event)"
        echo "🔒 Security scan completed - check artifacts for results"